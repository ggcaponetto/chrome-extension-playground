import "../../../assets/js/modulepreload-polyfill.js";
import { a as addHmrIntoView } from "../../../assets/js/_virtual_reload-on-update-in-view.js";
import { l as loglevel } from "../../../assets/js/loglevel.js";
import "../../../assets/js/_commonjsHelpers.js";
const ll = loglevel.exports.getLogger("index.tsx");
{
  ll.setLevel(loglevel.exports.levels.WARN);
}
addHmrIntoView("pages/sandbox");
function evalInContext(js, context) {
  return function() {
    return eval(js);
  }.call(context);
}
window.onload = () => {
  console.log("the sandbox has been loaded.");
};
window.addEventListener("message", async function(event) {
  console.log("the sandbox got a message", event);
  if (event.data.command === "eval") {
    console.log("the sandbox is evaluating code...", {
      code: event.data.code,
      context: event.data.context
    });
    const result = await evalInContext(event.data.code, event.data.context).catch((e) => {
      return e.message;
    });
    console.log("the sandbox is sending back the evaluated result: ", result);
    event.source.postMessage(
      {
        result,
        originalData: event.data
      },
      event.origin
    );
  }
});
console.log("the sandbox is now listening to events");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wYWdlcy9zYW5kYm94L2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVmcmVzaE9uVXBkYXRlIGZyb20gXCJ2aXJ0dWFsOnJlbG9hZC1vbi11cGRhdGUtaW4tdmlld1wiO1xyXG5cclxuaW1wb3J0ICogYXMgbG9nIGZyb20gXCJsb2dsZXZlbFwiO1xyXG5jb25zdCBsbCA9IGxvZy5nZXRMb2dnZXIoXCJpbmRleC50c3hcIik7XHJcbmltcG9ydCBwcm9jZXNzIGZyb20gXCJwcm9jZXNzXCI7XHJcblxyXG5jb25zdCBpc0xvZ3NFbmFibGVkID0gZmFsc2U7XHJcbmlmIChwcm9jZXNzLmVudi5WSVRFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiICYmIGlzTG9nc0VuYWJsZWQpIHtcclxuICBsbC5zZXRMZXZlbChsb2cubGV2ZWxzLkRFQlVHKTtcclxufSBlbHNlIHtcclxuICBsbC5zZXRMZXZlbChsb2cubGV2ZWxzLldBUk4pO1xyXG59XHJcblxyXG5yZWZyZXNoT25VcGRhdGUoXCJwYWdlcy9zYW5kYm94XCIpO1xyXG5cclxuZnVuY3Rpb24gZXZhbEluQ29udGV4dChqcywgY29udGV4dCkge1xyXG4gIC8vIyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgdGhlIGluLWxpbmUgYW5vbnltb3VzIGZ1bmN0aW9uIHdlIC5jYWxsIHdpdGggdGhlIHBhc3NlZCBjb250ZXh0XHJcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBldmFsKGpzKTtcclxuICB9LmNhbGwoY29udGV4dCk7XHJcbn1cclxuXHJcbndpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coXCJ0aGUgc2FuZGJveCBoYXMgYmVlbiBsb2FkZWQuXCIpO1xyXG59O1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgYXN5bmMgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgY29uc29sZS5sb2coXCJ0aGUgc2FuZGJveCBnb3QgYSBtZXNzYWdlXCIsIGV2ZW50KTtcclxuICBpZiAoZXZlbnQuZGF0YS5jb21tYW5kID09PSBcImV2YWxcIikge1xyXG4gICAgY29uc29sZS5sb2coXCJ0aGUgc2FuZGJveCBpcyBldmFsdWF0aW5nIGNvZGUuLi5cIiwge1xyXG4gICAgICBjb2RlOiBldmVudC5kYXRhLmNvZGUsXHJcbiAgICAgIGNvbnRleHQ6IGV2ZW50LmRhdGEuY29udGV4dCxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXZhbEluQ29udGV4dChcclxuICAgICAgZXZlbnQuZGF0YS5jb2RlLFxyXG4gICAgICBldmVudC5kYXRhLmNvbnRleHRcclxuICAgICkuY2F0Y2goKGUpID0+IHtcclxuICAgICAgcmV0dXJuIGUubWVzc2FnZTtcclxuICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2coXCJ0aGUgc2FuZGJveCBpcyBzZW5kaW5nIGJhY2sgdGhlIGV2YWx1YXRlZCByZXN1bHQ6IFwiLCByZXN1bHQpO1xyXG4gICAgZXZlbnQuc291cmNlLnBvc3RNZXNzYWdlKFxyXG4gICAgICB7XHJcbiAgICAgICAgcmVzdWx0OiByZXN1bHQsXHJcbiAgICAgICAgb3JpZ2luYWxEYXRhOiBldmVudC5kYXRhLFxyXG4gICAgICB9LFxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgZXZlbnQub3JpZ2luXHJcbiAgICApO1xyXG4gIH1cclxufSk7XHJcbmNvbnNvbGUubG9nKFwidGhlIHNhbmRib3ggaXMgbm93IGxpc3RlbmluZyB0byBldmVudHNcIik7XHJcbiJdLCJuYW1lcyI6WyJsbCIsImxvZyIsInNldExldmVsIiwiV0FSTiIsInJlZnJlc2hPblVwZGF0ZSIsImV2YWxJbkNvbnRleHQiLCJqcyIsImNvbnRleHQiLCJldmFsIiwiY2FsbCIsIndpbmRvdyIsIm9ubG9hZCIsImNvbnNvbGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJkYXRhIiwiY29tbWFuZCIsImNvZGUiLCJyZXN1bHQiLCJjYXRjaCIsImUiLCJtZXNzYWdlIiwic291cmNlIiwicG9zdE1lc3NhZ2UiLCJvcmlnaW5hbERhdGEiLCJvcmlnaW4iXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxNQUFNQSxLQUFLQyxTQUFBQSxRQUFBQSxVQUFjLFdBQVc7QUFNN0I7QUFDRkMsS0FBQUEsU0FBU0Qsd0JBQVdFLElBQUk7QUFDN0I7QUFFQUMsZUFBZ0IsZUFBZTtBQUUvQixTQUFTQyxjQUFjQyxJQUFJQyxTQUFTO0FBRWxDLFNBQU8sV0FBWTtBQUNqQixXQUFPQyxLQUFLRixFQUFFO0FBQUEsRUFBQSxFQUNkRyxLQUFLRixPQUFPO0FBQ2hCO0FBRUFHLE9BQU9DLFNBQVMsTUFBTTtBQUNwQkMsVUFBUVgsSUFBSSw4QkFBOEI7QUFDNUM7QUFDQVMsT0FBT0csaUJBQWlCLFdBQVcsZUFBZ0JDLE9BQU87QUFDaERiLFVBQUFBLElBQUksNkJBQTZCYSxLQUFLO0FBQzFDQSxNQUFBQSxNQUFNQyxLQUFLQyxZQUFZLFFBQVE7QUFDakNKLFlBQVFYLElBQUkscUNBQXFDO0FBQUEsTUFDL0NnQixNQUFNSCxNQUFNQyxLQUFLRTtBQUFBQSxNQUNqQlYsU0FBU08sTUFBTUMsS0FBS1I7QUFBQUEsSUFBQUEsQ0FDckI7QUFDS1csVUFBQUEsU0FBUyxNQUFNYixjQUNuQlMsTUFBTUMsS0FBS0UsTUFDWEgsTUFBTUMsS0FBS1IsT0FBTyxFQUNsQlksTUFBT0MsQ0FBTSxNQUFBO0FBQ2IsYUFBT0EsRUFBRUM7QUFBQUEsSUFBQUEsQ0FDVjtBQUNPcEIsWUFBQUEsSUFBSSxzREFBc0RpQixNQUFNO0FBQ3hFSixVQUFNUSxPQUFPQztBQUFBQSxNQUNYO0FBQUEsUUFDRUw7QUFBQUEsUUFDQU0sY0FBY1YsTUFBTUM7QUFBQUEsTUFDdEI7QUFBQSxNQUdBRCxNQUFNVztBQUFBQSxJQUFBQTtBQUFBQSxFQUVWO0FBQ0YsQ0FBQztBQUNEYixRQUFRWCxJQUFJLHdDQUF3QzsifQ==
